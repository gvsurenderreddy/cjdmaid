#!/usr/bin/env node

/**
 * This file is part of Cjdmaid.
 *
 * Cjdmaid program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var program = require("commander");
var when = require("when");

var util = require(__dirname + "/../lib/util");
var config = require(__dirname + "/../lib/config");
var addingdata = require(__dirname + "/../lib/addingdata");


program
	.option("-f, --force", "Immediately continue")
	.option("-p, --passwd <text>", "Node password")
	.option("-n, --name <text>", "Node author's name")
	.option("-e, --email <email>", "Node author's email")
	.option("-l, --location <text>", "Node location")
	.option("-4, --ipv4 <ip>", "Node ipv4")
	.option("-6, --ipv6 <ip>", "Node ipv6");

program.on("--help", function(){
	console.log("  Examples:");
	console.log("");
	console.log("    $ cjdmaid-addpass");
	console.log("    $ cjdmaid-addpass --email someone@domain.org");
	console.log("    $ cjdmaid-addpass " +
		"-n someone -e someone@domain.org -l 'Russia, Moscow'");
	console.log("    $ cjdmaid-addpass " +
		"--password SfmsdfJQdfJDFnqExamplEnASFnfdisQm");
	console.log("");
});

program.parse(process.argv);



var adata = new addingdata({
	addingKeys: [
		"password",
		"name",
		"email",
		"location",
		"ipv6",
		"ipv4"
	]
});


adata.setDataField("password", program.passwd);
adata.setDataField("name", program.name);
adata.setDataField("email", program.email);
adata.setDataField("location", program.location);
adata.setDataField("ipv4", program.ipv4);
adata.setDataField("ipv6", program.ipv6);


when(
	util.generatePassword(48)
)
.then(function (password) {
	if (!util.isDef(adata.addingData.password)) {
		adata.setDataField("password", password);
	}
	return adata.promptMissingFields();
})
.then(function () {
	if (program.force) {
		return when.resolve();
	} else {
		return adata.chooseAction();
	}
})
.yield(
	config.readCustomConf("cjdrouteNodesConf")
)
.then(function (doc) {
	if (!util.isDef(doc.authorizedPasswords)) {
		doc.authorizedPasswords = [];
	}

	var pushObject = util.cloneObject(adata.addingData);
	doc.authorizedPasswords.push(pushObject);

	return config.writeCustomConf("cjdrouteNodesConf", doc);
})
.then(function () {
	console.log("Pass saved!");

	console.log("");
	console.log("Here's data that you need send to your friend: ");
	return config.readSeveralConfs(["cjdmaidConf", "cjdrouteConf"]);

})
.then(function (docs) {
	var cjdmaidConfJson = docs[0];
	var cjdrouteConfJson = docs[1];

	var resultObject = {};
	resultObject[cjdmaidConfJson.address] = {
		"password": adata.addingData.password,
		"publicKey": cjdrouteConfJson.publicKey,
		"ipv6": cjdrouteConfJson.ipv6,
		"name": cjdmaidConfJson.name,
		"email": cjdmaidConfJson.email,
		"location": cjdmaidConfJson.location
	};
	var resultJson = JSON.stringify(resultObject, null, 4);
	resultJson = resultJson.replace(/^\s{4}/mg, "");
	resultJson = resultJson.substring(1, resultJson.length);
	resultJson = resultJson.substring(0, resultJson.length - 1);

	console.log(resultJson);
	return process.stdin.destroy();
});
