#!/usr/bin/env node

/**
 * This file is part of Cjdmaid.
 *
 * Cjdmaid program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var program = require("commander");
var when = require("when");

var util = require(__dirname + "/../lib/util");
var config = require(__dirname + "/../lib/config");
var commfn = require(__dirname + "/../lib/commander/function");


var addingData = {};
var addingKeys = [
	"publicKey",
	"ipv4",
	"ipv6",
	"name",
	"email",
	"location"
];

program
	.option("-c, --configpath <path>", "Config json path where write data",
		util.configpath, ["router", "ipTunnel", "allowedConnections"])
	.option("-f, --force", "Immediately continue")
	.option("-P, --publicKey <text>", "Node publicKey")
	.option("-4, --ipv4 <ip>", "Node ipv4")
	.option("-6, --ipv6 <ip>", "Node ipv6")
	.option("-n, --name <text>", "Node author's name")
	.option("-e, --email <email>", "Node author's email")
	.option("-l, --location <text>", "Node location");

program.on("--help", function () {
	console.log("  Examples:");
	console.log("");
	console.log("    $ cjdmaid allowcon");
	console.log("    $ cjdmaid-allowcon --email someone@domain.org");
	console.log("    $ cjdmaid-allowcon " +
		"-n someone -e someone@domain.org -l 'Russia, Moscow'");
	console.log("    $ cjdmaid-allowcon " +
		"--configpath router.ipTunnel.allowedConnections");
	console.log("    $ cjdmaid-allowcon " +
		"--publicKey SfmsdfJQdfJDFnqExamplEnASFnfdisQm");
	console.log("");
});
program.parse(process.argv);



function addDataField (key, value) {
	if (!util.isDef(value)) {
		return;
	}

	if (addingKeys.indexOf(key) !== -1){
		addingData[key] = value;
	} else {
		addingKeys.push(key);
		addingData[key] = value;
	}
}

addDataField("publicKey", program.publicKey);
addDataField("ipv4", program.ipv4);
addDataField("ipv6", program.ipv6);
addDataField("name", program.name);
addDataField("email", program.email);
addDataField("location", program.location);


util.isConfigPathPossible(program.configpath, "array")
.then(function (ok) {
	if (!ok) {
		util.panic("Impossible --configpath");
	}
	//return promptMissingFields("publicKey")
	var neededData = {};
	for (var i = 0; i < addingKeys.length; i++) {
		if (!util.isDef(addingData[addingKeys[i]])) {
			neededData[addingKeys[i]] = addingKeys[i] + ": ";
		}
	}

	return commfn.call(program.prompt, program, neededData);

}).then(function (data) {
	for (var i in data) {
		if (data.hasOwnProperty(i)) {
			addDataField(i, data[i]);
		}
	}

	if (program.force) {
		saveAddingDataToConfig();
	} else {
		showAddingData();
	}
});


function changeField(field) {
	return commfn.call(program.prompt, program, field + ": ")
		.then(function (data) {
			addingData[field] = data;
		});
}

function addField(field) {
	if (util.isDef(field)) {
		addingKeys.push(field);

		return commfn.call(program.prompt, program, field + ": ")
			.then(function (data) {
				addingData[addingKeys[addingKeys.length - 1]] = data;
			});
	} else {
		return commfn.call(program.prompt, program, "Field name: ")
			.then(function (data) {
				if (!data.length) {
					return when.reject();
				}
				addingKeys.push(data);
				return commfn.call(program.prompt, program, data + ": ");
			}).then(function (data) {
				addingData[addingKeys[addingKeys.length - 1]] = data;
			});
	}
}

function removeField() {
	var deferred = when.defer();

	console.log("");
	for (var i = 0; i < addingKeys.length; i++) {
		console.log("[" + (i + 1) + "] Remove " +
			"\"" + addingKeys[i] + "\" (" + addingData[addingKeys[i]] + ")");
	}

	console.log("");
	console.log("[n] Cancel");
	console.log("");

	program.prompt(
		"What you want remove [n]?: ",
		function askRemovingDataLine(data) {
			data = data.toLowerCase();
			if (data === "" || data === "n") {
				deferred.resolve();
				return;
			}
			var index = parseInt(data, 10) - 1;
			if (index < 0 || index > addingKeys.length) {
				console.log("No such option");
				return program.prompt(
					"What you want remove [n]?: ",
					askRemovingDataLine
				);
			}
			delete addingData[addingKeys[index]];
			addingKeys.splice(index, 1);
			deferred.resolve();
		}
	);
	return deferred.promise;
}



function showAddingData () {
	console.log("");

	for (var i = 0; i < addingKeys.length; i++) {
		console.log("[" + (i + 1) + "] Edit " +
			"\"" + addingKeys[i]+  "\" (" + addingData[addingKeys[i]] + ")");
	}

	console.log("");

	console.log("[a] Add new field");
	console.log("[r] Remove field");
	console.log("[y] Continue");
	console.log("[n] Cancel");

	console.log("");
	program.prompt(
		"What you want to do [y]?: ",
		function askAddingDataLine(data) {
			data = data.toLowerCase();
			if (data === "a") {
				addField()
				.then(function () {
					showAddingData();
				});
				return;
			}
			else if (data === "r") {
				removeField()
				.then(function () {
					showAddingData();
				});
				return;
			}
			else if (data === "" || data === "y") {
				saveAddingDataToConfig();
				return;
			}
			else if (data === "n") {
				console.log("exiting...");
				return process.stdin.destroy();
			}

			var index = parseInt(data, 10) - 1;
			if (data === "" || index < 0 || index > addingKeys.length) {
				console.log("No such option");
				return program.prompt(
					"What you want to do [y]?: ",
					askAddingDataLine
				);
			}

			changeField(addingKeys[index])
			.then(function () {
				showAddingData();
			});
		}
	);
}

function saveAddingDataToConfig () {
	config.readCustomConf("cjdrouteNodesConf")
	.then(function (doc) {
		var pushObject = util.cloneObject(addingData);

		var docIter = doc; // pointer



		var isPossible =
			util.isPathPossible(program.configpath, docIter, "array");
		if (!isPossible) {
			return util.panic("Impossible --configpath");
		}
		docIter = isPossible.pointer;



		docIter.push(pushObject);

		config.writeCustomConf("cjdrouteNodesConf", doc)
		.then(function () {
			console.log("Connection saved!");

			return process.stdin.destroy();
		});
	});
}

