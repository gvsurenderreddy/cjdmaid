#!/usr/bin/env node

/**
 * This file is part of Cjdmaid.
 *
 * Cjdmaid program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var program = require("commander");
var when = require("when");

var util = require(__dirname + "/../lib/util");
var config = require(__dirname + "/../lib/config");
//var commfn = require(__dirname + "/../lib/commander/function");
var addingdata = require(__dirname + "/../lib/addingdata");

/*
var addingData = {};
var addingKeys = [
	"publicKey"
];
*/

program
	.option("-c, --configpath <path>", "Config json path where write data",
		util.configpath, ["router", "ipTunnel", "outgoingConnections"])
	.option("-f, --force", "Immediately continue")
	.option("-P, --publicKey <text>", "Node publicKey");

program.on("--help", function () {
	console.log("  Examples:");
	console.log("");
	console.log("    $ cjdmaid-outcon");
	console.log("    $ cjdmaid-outcon " +
		"--configpath router.ipTunnel.outgoingConnections");
	console.log("    $ cjdmaid-outcon " +
		"--publicKey QmdsfOThiIsExampleSfmOIgnSGnxNs");
	console.log("");
});


program.parse(process.argv);


var adata = new addingdata({
	addingKeys: [
		"publicKey"
	],
	onlyOne: true
});


adata.setDataField("publicKey", program.publicKey);


when(
	util.isConfigPathPossible(program.configpath, "array")
)
.then(function (ok) {
	if (!ok) {
		util.panic("Impossible --configpath");
	}
	return adata.promptMissingFields();


})
.then(function () {
	if (program.force) {
		return when.resolve();
	} else {
		return adata.chooseAction();
	}

})
.yield(
	config.readCustomConf("cjdrouteConf")
)
.then(function (doc) {

	var pushObject = adata.addingData.publicKey;
	var docIter = doc; // pointer



	var isPossible =
		util.isPathPossible(program.configpath, docIter, "array");
	if (!isPossible) {
		return util.panic("Impossible --configpath");
	}
	docIter = isPossible.pointer;




	docIter.push(pushObject);


	return config.writeCustomConf("cjdrouteConf", doc);

}).then(function () {
	console.log("Connection saved!");

	return process.stdin.destroy();
});
