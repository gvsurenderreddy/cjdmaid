#!/usr/bin/env node

/**
 * This file is part of Cjdmaid.
 *
 * Cjdmaid program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var program = require("commander");
var when = require("when");

var util = require(__dirname + "/../lib/util");
var config = require(__dirname + "/../lib/config");
var commfn = require(__dirname + "/../lib/commander/function");
var addingdata = require(__dirname + "/../lib/addingdata");


program
	.option("-c, --configpath <path>", "Config json path where write data",
		util.configpath, ["interfaces", "UDPInterface", 0, "connectTo"])
	.option("-f, --force", "Immediately continue")
	.option("-r, --rewrite", "Force peer rewrite")
	.option("-a, --address <ip:port>", "Node address")
	.option("-p, --passwd <text>", "Node password")
	.option("-P, --publicKey <text>", "Node publicKey")
	.option("-6, --ipv6 <ip>", "Node ipv6")
	.option("-n, --name <text>", "Node author's name")
	.option("-e, --email <email>", "Node author's email")
	.option("-l, --location <text>", "Node location");

program.on("--help", function(){
	console.log("  Examples:");
	console.log("");
	console.log("    $ cjdmaid-addpeer");
	console.log("    $ cjdmaid-addpeer --email someone@domain.org");
	console.log("    $ cjdmaid-addpeer " +
		"--configpath interfaces.UDPInterface[0].connectTo");
	console.log("    $ cjdmaid-addpeer " +
		"--password SfmsdfJQdfJDFnqExamplEnASFnfdisQm");
	console.log("");
});

program.parse(process.argv);


var adata = new addingdata({
	addingKeys: [
		"address",
		"password",
		"publicKey",
		"ipv6",
		"name",
		"email",
		"location"
	]
});



adata.setDataField("address", program.address);
adata.setDataField("password", program.passwd);
adata.setDataField("publicKey", program.publicKey);
adata.setDataField("ipv6", program.ipv6);
adata.setDataField("name", program.name);
adata.setDataField("email", program.email);
adata.setDataField("location", program.location);


when(
	util.isConfigPathPossible(program.configpath, "object")
)
.then(function (ok) {
	if (!ok) {
		return util.panic("Impossible --configpath");
	}
})
.yield(
	commfn.call(program.prompt, program, "Paste json data (new line on end):")
)
.then(function (data) {
	// fix some common errors

	var trimData = data.trim();
	var stripComma = trimData.replace(/,$/, "");
	var fixCommas = stripComma.replace(/("|')$/mg, "$1,");
	var lastComma = fixCommas.replace(/("|')(.*?)("|'),\s*}/, "$1$2$3}");
	var addBrackets = "{" + lastComma + "}";
	var peerJson = {};

	try {
		peerJson = JSON.parse(addBrackets);
	} catch (e) {
		return util.panic("Error while parsing json. Check it for errors.");
	}

	var address = Object.keys(peerJson)[0];
	if (util.isDef(address)) {
		for(var key in peerJson[address]) {
			if (peerJson[address].hasOwnProperty(key)) {
				adata.setDataField(key, peerJson[address][key]);
			}
		}
		adata.addDataField("address", address);
	}

	return adata.promptMissingFields();
})
.then(function () {
	if (program.force) {
		return when.resolve();
	} else {
		return adata.chooseAction();
	}
})
.yield(
	config.readCustomConf("cjdrouteConf")
)
.then(function (doc) {

	var pushObject = util.cloneObject(adata.addingData);
	delete pushObject.address;

	var docIter = doc; // pointer


	var isPossible =
		util.isPathPossible(program.configpath, docIter, "object");
	if (!isPossible) {
		return util.panic("Impossible --configpath");
	}
	docIter = isPossible.pointer;



	var isPeerDefined = util.isDef(docIter[adata.addingData.address]);
	docIter[adata.addingData.address] = pushObject;

	if (!isPeerDefined) {
		return writeNodesToFile(doc);
	}
	if (program.rewrite){
		console.log("Peer with that address exists. Rewriting.");
		return writeNodesToFile(doc);
	}

	return when(
		commfn.call(
			program.confirm,
			program,
			"Peer with that address exists. Continue? "
		)
	)
	.then(function (ok) {
		if (!ok) {
			console.log("exiting...");
			return process.stdin.destroy();
		}
		return writeNodesToFile(doc);
	});
});

function writeNodesToFile (doc) {
	return when(
		config.writeCustomConf("cjdrouteConf", doc)
	)
	.then(function () {
		console.log("Saved.");
		process.stdin.destroy();
	});
}
